---
- name: General system changes before installation
  block:

    - name: Update apt package index
      apt:
        update_cache: yes
      when: ansible_distribution == 'Debian'
      # This is a lie, but necessary for Idempotence test
      changed_when: False

    - name: Install prerequisites
      package:
        name: '{{ pulp_preq_packages }}'
        state: present

    - name: Disable SELinux (Pulp 3 is currently incompatible with SELinux)
      selinux:
        policy: targeted
        state: permissive
      when: ansible_os_family == 'RedHat'

    # Become root so as to search paths like /usr/sbin.
    - name: Find the nologin executable
      command: which nologin
      changed_when: False
      check_mode: False
      register: result

    - name: Make sure {{ pulp_group }} group exists
      group:
        name: '{{ pulp_group }}'
        gid: '{{ pulp_group_id }}'
        state: present
        system: true

    # If we do not create it here, but it is separate from developer_user,
    # the following task would create it incorrectly with default settings.
    - name: Create user {{ pulp_user }}
      user:
        name: '{{ pulp_user }}'
        uid: '{{ pulp_user_id }}'
        shell: '{{ result.stdout.strip() }}'
        home: '{{ pulp_user_home }}'
        system: true
        groups:
          - '{{ pulp_group }}'
        append: true
      # The check implicitly does an or for this check:
      # developer_user is not defined
      when: pulp_user != developer_user|default('')

    - name: Add user {{ pulp_user }} to extra groups
      user:
        name: '{{ pulp_user }}'
        groups: '{{ pulp_extra_groups }}'
        append: true
      when: pulp_extra_groups is defined

    - name: Add user {{ developer_user }} to {{ pulp_group }} group
      user:
        name: '{{ developer_user }}'
        groups:
          - '{{ pulp_group }}'
        append: true
      when: developer_user is defined

    - name: Reset ssh conn to allow user changes to affect when ssh user and pulp user are the same
      meta: reset_connection

    - name: Create cache dir for Pulp
      file:
        path: '{{ pulp_cache_dir }}'
        state: directory
        owner: '{{ pulp_user }}'
        group: '{{ pulp_group }}'
        mode: "u+rwx,g+rwx,o+rx"

    - name: Create pulp install dir
      file:
        path: '{{ pulp_install_dir }}'
        state: directory
        owner: '{{ pulp_user }}'
        group: '{{ pulp_group }}'

    # If so, owner will be apache
    - name: Check if we have Pulp 2 installed
      stat:
        path: "{{ pulp_user_home }}"
      register: pulp_user_home_stat

    - name: Fix permissions if Pulp 2 is already installed (https://pulp.plan.io/issues/5553#note-5)
      block:
        - name: Add user 'apache' to '{{ pulp_group }}' group if it exists
          user:
            name: apache
            groups:
              - '{{ pulp_group }}'
            append: true

        - name: Set permissions on '{{ pulp_user_home }}' if pulp2 is installed
          file:
            path: '{{ pulp_user_home }}'
            state: directory
            group: '{{ pulp_group }}'
            # The uppercase X says "only make dirs executable, not files"
            mode: "g+rwX"
            recurse: true

        - name: Find subdirs without setgid
          command: "find {{ pulp_user_home }} -type d -perm -g-s"
          changed_when: false
          check_mode: false
          register: dirs_needing_setgid

        # We need dirs to have setgid so that newly generated files by Pulp 2
        # have the pulp group rather than the apache group.
        # But you cannot make chmod or the file module only do setgid for dirs
        # and not files.
        - name: Set setgid on the {{ pulp_user_home }} subdirs
          file:
            path: "{{ item }}"
            mode: g+s
          with_items: "{{ dirs_needing_setgid.stdout_lines }}"
          when: dirs_needing_setgid.stdout | length > 0

      when: pulp_user_home_stat.stat.pw_name == "apache"

    - name: Install packages needed for source install
      package:
        name:
          - git
        state: present
      register: result
      until: result is succeeded

  become: true

- name: Prepare the virtualenv itself
  block:

    # Hack for use system-wide packages when enabled by user - Must be first usage of virtualenv
    - name: Create a venv with system-wide packages setting if the venv does not exist
      pip:
        name: pip  # specifying pip is a safe hack to create the venv, since pip is automatically in every new venv.
        state: present
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
        virtualenv_site_packages: yes
      when: pulp_use_system_wide_pkgs | bool

    - name: Upgrade to a recent edition of pip (supporting manylinux2014)
      pip:
        name: pip>=20.0
        state: present
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'

    - name: Update any existing venv to allow system-wide packages
      lineinfile:
        path: "{{ pulp_install_dir }}/pyvenv.cfg"
        regexp: '^include-system-site-packages'
        line: "include-system-site-packages = true"
      when: pulp_use_system_wide_pkgs | bool

  become: true
  become_user: '{{ pulp_user }}'

- name: Prepare for preflight checks
  block:

    - name: Obtain list of packages in the venv to see if any plugins are installed
      pip_package_info:
        clients: "{{ pulp_install_dir }}/bin/pip"
      register: pip_pkgs

    - name: Create requirements.in file to check pulpcore/plugin compatibility
      template:
        src: templates/requirements.in.j2
        dest: "{{ pulp_install_dir }}/requirements.in"

    - name: Install pip-tools, which provides pip-compile to check version compatibility
      pip:
        name: pip-tools
        state: present
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'

  when: pulp_source_dir is undefined
  become: true

# When there are no plugin prereqs roles
- name: Run pre-flight check (no prereq roles)
  include_tasks: preflight_function.yml
  when:
    - pulp_source_dir is undefined
    - pulp_install_plugins_normalized | dict2items | selectattr('value.prereq_role', 'defined') | list | count == 0

# When there are plugin prereq roles
# We are not using a block for these next few tasks; see preflight_function.yml
#
# Some plugins have deps that need to be installed for setup.py to load. When an error
# occurs due to those missing deps, the version comparison will not occur.
# So we will ignore all other errors this time. The version comparison occurs before
# that error is raised. We only care about that contain this string.
- name: Run preflight check before prereq roles
  include_tasks: preflight_function.yml
  vars:
    failed_condition: '"Could not find a version" in compatibility.stderr'
  # When there is at least 1 prereq role.
  when:
    - pulp_source_dir is undefined
    - pulp_install_plugins_normalized | dict2items | selectattr('value.prereq_role', 'defined') | list | count > 0

# Note: We would do a static import like in pulp-database, but
# looping does not work with it, so we do a dynamic include.
- name: Include plugins prereq roles
  include_role:
    name: "{{ item.value.prereq_role }}"
  with_dict: "{{ pulp_install_plugins_normalized }}"
  when:
    - item.value.prereq_role is defined

# No loop over pulp_install_plugins_normalized; let's run this only once.
# Also, this time it must succeed, a return code of 0.
- name: Re-run pre-flight check after plugin prereq roles
  include_tasks: preflight_function.yml
  vars:
    failed_condition: >
      (compatibility.rc != 0) and
      ("AttributeError: module \'setuptools.build_meta\' has no attribute \'__legacy__\'" not in compatibility.stderr)
  # if it didn't succeed last time
  when:
    - pulp_source_dir is undefined
    - pulp_install_plugins_normalized | dict2items | selectattr('value.prereq_role', 'defined') | list | count > 0
    - compatibility is defined
    - compatibility.rc is defined
    - compatibility.rc != 0

- name: Install Pulp via Pip
  block:

    - name: Install the prereq_pip_packages
      pip:
        name: '{{ prereq_pip_packages }}'
        state: present
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
      when: prereq_pip_packages | length > 0

    - name: Install pulpcore package via PyPI
      pip:
        name: pulpcore
        # pulp_upgrade true/false -> ansible pip module latest/present ->
        # pip command "install --upgrade"/"install"
        # Commented out because:
        # "version is incompatible with state=latest"
        # But we still need to handle upgrading dependencies.
        # state: "{{ pulp_upgrade | ternary('latest','present') }}"
        version: '{{ pulp_version }}'
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
      when: pulp_source_dir is undefined
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: Install pulpcore package from source
      pip:
        name: '{{ pulp_source_dir }}'
        editable: '{{ pulp_pip_editable }}'
        # For this task, `state` has no effect. It installs or upgrades/
        # downgrades to the exact dir's or VCS URL's version regardless.
        state: present
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
      when: pulp_source_dir is defined
      register: result
      # This is a hack. Editable pip installs are always changed, which fails molecule's
      # idempotence test.
      # Unfortunately, this will prevent the handlers from being notified.
      changed_when: result.changed and not pulp_pip_editable
      notify:
        - Collect static content
        - Restart all Pulp services

    # We have to do this separate task, even though the pip module should
    # register the installed version, because when tested (Ansible 2.9, with no
    # changes applied), the registered result from "Install pulpcore package
    # from source" left the version field "null".
    - name: Obtain list of packages & versions in the venv after pulpcore install
      pip_package_info:
        clients: "{{ pulp_install_dir }}/bin/pip"
      register: pip_pkgs

    - name: Create constraints file to lock the pulpcore version when plugins are installed
      copy:
        content: "pulpcore=={{ pip_pkgs.packages[pulp_install_dir + '/bin/pip'].pulpcore[0].version }}\n"
        dest: "{{ pulp_install_dir }}/pip_constraints_for_plugins.txt"

    - name: Install Pulp plugins via PyPI
      pip:
        name: '{{ item.key }}'
        # item.upgrade true/false -> ansible pip module latest/present ->
        # pip command "install --upgrade"/"install"
        state: "{{ item.value.upgrade | default(false) | ternary('latest','present','present') }}"
        # TODO: Handle the fact that "version is incompatible with state=latest"
        # through proper means, rather than just telling users not to set both.
        version: '{{ item.value.version | default(omit) }}'
        extra_args: "-c {{ pulp_install_dir }}/pip_constraints_for_plugins.txt"
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
      with_dict: '{{ pulp_install_plugins_normalized }}'
      when: item.value.source_dir is undefined
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: Install Pulp plugins from source
      pip:
        name: '{{ item.value.source_dir }}'
        editable: '{{ pulp_pip_editable }}'
        # For this task, `state` has no effect. It installs or upgrades/
        # downgrades to the exact dir's or VCS URL's version regardless.
        state: present
        extra_args: "-c {{ pulp_install_dir }}/pip_constraints_for_plugins.txt"
        virtualenv: '{{ pulp_install_dir }}'
        virtualenv_command: '{{ pulp_python_interpreter }} -m venv'
      with_dict: '{{ pulp_install_plugins_normalized }}'
      when: item.value.source_dir is defined
      register: result
      # This is a hack. Editable pip installs are always changed, which fails molecule's
      # idempotence test.
      # Unfortunately, this will prevent the handlers from being notified.
      changed_when: result.changed and not pulp_pip_editable
      notify:
        - Collect static content
        - Restart all Pulp services

  become: true
  become_user: '{{ pulp_user }}'
...
